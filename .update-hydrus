#!/bin/bash
# Uses the PIPESTATUS bashism
cd "${0%/*}"

pipecheck() { ( exit "${PIPESTATUS[0]}" ); }
_terminal() {  # This function execs, be careful
    exec </dev/null >/dev/null 2>&1
    export RUN_COMMAND="$*"
    set -- -e 'bash -c "eval $RUN_COMMAND"'
    try() { command -v "$1" && exec "$@"; }
    try "$TERMINAL" "$@"
    try i3-sensible-terminal "$@"
    try sakura "$@"
    try gnome-terminal "$@"
    try urxvt "$@"
    try xterm "$@"
}

# Check for zenity. This is used for user interaction.
if ! command -v zenity > /dev/null; then
    msg='Please install zenity to use this script!'
    if command -v xmessage > /dev/null; then
        xmessage "$msg"
    else
        _terminal "echo '$msg'; read x"
    fi
    exit
fi

error() {
    zenity --error --title="Error in update-hydrus" --text="$*"; exit 1
}

. /etc/lsb-release

message='echo "Some dependencies are required to install Hydrus from source. This will attempt to install them."'
case $DISTRIB_ID in
    Arch)
        deps="python2 python2-virtualenv python2-pip libyaml libjpeg freetype2 wxpython zlib opencv git"
        unmet=$(pacman -T $deps)
        [ -n "$unmet" ] &&
            ( export unmet; _terminal "$message; sudo pacman -S \$unmet || { echo 'Press return to continue'; read; }" )
        ;;
    Ubuntu)
        deps="dpkg-dev build-essential swig python python-virtualenv python-pip python-dev libyaml-dev libjpeg-dev libtiff-dev checkinstall freeglut3 freeglut3-dev libgtk2.0-dev libsdl1.2-dev libgstreamer-plugins-base0.10-dev libfreetype6-dev zlib1g-dev python-wxversion python-opencv git checkinstall"
        unmet=$(apt-cache policy $deps | grep -B1 'Installed: (none)' | grep '^[^ ].*:$' | tr -d :)
        [ -n "$unmet" ] &&
            ( export unmet; _terminal "$message; sudo apt-get install \$unmet || { echo 'Press return to continue'; read; }" )
        ;;
esac

# Check for dependencies - round 2, OS independent
python2 -c 'exit(0)' 2>/dev/null || error 'Please install python 2.'

python2 -c '__import__("virtualenv").main()' --version 2>/dev/null ||
    error 'Please install virtualenv2. Your system might call this "python2-virtualenv".'

command -v pip2 >/dev/null ||
    error 'Please install pip2. Your system might call this "python2-pip".'

# Ensure we have the venv set up
if ! [ -f hydrus-runtime/installed ]; then
    if
        ./.create-environment | zenity --progress --pulsate --no-cancel --auto-close --text='Setting up virtual environment - this may take some time'
        ! pipecheck
    then
        # If setup failed, warn user
        error 'Could not create the virtual environment. Please check the output of hydrus-runtime.log for errors.'
    fi
fi
. hydrus-runtime/bin/activate

# Check dependencies - round 3, python imports from the virtualenv
dep() { python -c '__import__("wx").BoxSizer(wx.HORIZONTAL).GetItemCount()' 2>/dev/null; }
if ! dep; then
    if python -c 'import wx' 2>/dev/null; then
        text="Your version of wxPython is too old for Hydrus."
    else
        text="Did not find wxPython."
    fi
    zenity --question --text="$text Try to install from source?" || error \
'Please install wxpython.
Depending on your system, it might be called "wxpython" or "python-wxgtk3.0". 2.8 is too old.

If your system does not provide this, please follow the guide at http://wiki.wxpython.org/CheckInstall'
    # Try to install an up to date version manually
    wxpver=3.0.2.0
    curl -L "https://downloads.sourceforge.net/project/wxpython/wxPython/$wxpver/wxPython-src-$wxpver.tar.bz2" 2> >(stdbuf -i0 -o0 awk 'BEGIN{RS="\r"}{print $1}' | zenity --progress --no-cancel --auto-close --text="Downloading wxPython $wxpver") | tar xj || error "Failed to download wxPython $wxpver"
    ( _terminal "
        trap 'echo Press return;read' EXIT
        cd wxPython-src-$wxpver &&
        mkdir bld &&
        cd bld &&
        ../configure --prefix=/usr/local &&
        echo 'wxWidgets Cross-platform C++ GUI toolkit (GTK+ runtime)' > description-pak &&
        sudo checkinstall -y --pkgname=wxwidgets --pkgversion=$wxpver --pkgrelease=1 --pkglicense=wxWidgets --pkgsource=http://www.wxwidgets.org/ --maintainer=reingart@gmail.com --requires=libc6,libgcc1,libgdk-pixbuf2.0-0,libgl1,libglib2.0-0,libgstreamer-plugins-base0.10-0,libgstreamer0.10-0,libgtk2.0-0,libjpeg8,libpango1.0-0,libpng12-0,libsm6,libstdc++6,libtiff5,libxinerama1,libxxf86vm1 -D make install &&
        sudo dpkg -i wxwidgets*.deb &&
        cd ../wxPython &&
        echo 'wxWidgets Cross-platform C++ GUI toolkit (wxPython binding)' > description-pak &&
        sudo checkinstall -y --pkgname=wxpython --pkgversion=$wxpver --pkgrelease=1 --pkglicense=wxWidgets --pkgsource=http://www.wxpython.org/ --maintainer=reingart@gmail.com --requires=python-wxversion,python2.7,python,libc6,libgcc1,libstdc++6,wxwidgets -D python setup.py install &&
        sudo dpkg -i wxpython*.deb" )
    rm -rf "wxPython-src-$wxpver"
    dep || error 'Still can'\''t find a new version of wxPython'
fi

python -c 'import cv' 2>/dev/null || error \
'Please install pyopencv.
Depending on your system, it might be called "python-opencv" or it may be packaged along with "opencv" itself.'

command -v git >/dev/null || error 'Please install git. This is used to update and rollback hydrus.'

# Okay, hopefully that wasn't too painful.
# Download source from git if it's not here already
parse_git_clone_output() {
    stdbuf -i0 -o0 tr '\r' '\n' | while IFS= read -r line; do
        case $line in
            "Receiving objects"*)
                progress=${line#*: }
                progress=${progress%%%*}
                echo "$((progress / 2))"
                ;;
            "Resolving deltas"*)
                progress=${line#*: }
                progress=${progress%%%*}
                [ "$progress" = 100 ] && progress=99
                echo "$((50 + progress / 2))"
                ;;
        esac
    done
}

if ! [ -d hydrus ]; then
    if
        git clone --progress https://github.com/hydrusnetwork/hydrus.git 2>&1 | parse_git_clone_output |
            zenity --progress --no-cancel --auto-close --text='Cloning git repository'
        ! pipecheck
    then
        error 'Failed to download the Hydrus source code. Try "git clone https://github.com/hydrusnetwork/hydrus.git" in the hydrus-updater directory.'
    fi
fi

cd hydrus

parse_git_other_output() {
    stdbuf -i0 -o0 tr '\r' '\n' | while IFS= read -r line; do
        case $line in
            *": "[0-9]*"% ("*)
                progress=${line#*: }
                progress=${progress%%%*}
                echo "$progress"
                ;;
        esac
    done
}

# Update all versions from the repository
if
    git fetch --all | parse_git_other_output |
        zenity --progress --no-cancel --auto-close --text='Updating Hydrus'
    ! pipecheck
then
    error "Failed to update the Hydrus source code. Try manually running 'git fetch --all' in the hydrus directory"
fi

# Ask the user what to update to
update_to=$(zenity --forms --text='Update Hydrus' --add-list='Desired version' --list-values="latest|$(git tag -l | sort -nr | tr '\n' '|')")
[ -z "$update_to" ] && exit
[ "$update_to" = latest ] && update_to=master

if
    git checkout "$update_to" | parse_git_other_output |
        zenity --progress --no-cancel --auto-close --text='Switching Hydrus version'
    ! pipecheck
then
    error "Failed to switch Hydrus version. Try manually running 'git checkout $update_to' in the hydrus directory"
else
    zenity --info --text="Successfully updated Hydrus to $update_to (commit id: $(git rev-parse --short HEAD))"
fi

true # We win
